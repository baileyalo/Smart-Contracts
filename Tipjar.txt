// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

contract TipJar{
    address owner;
 
    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    constructor () {
        owner = msg.sender;
        
    }
 
   fallback() external payable {
}
      function withdraw() public payable  {
        require(owner == msg.sender);
        payable(msg.sender).transfer(address(this).balance);
    }


    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
    
    function changeOwner(address newOwner) public {
        require(owner == msg.sender);
        owner = newOwner;
        emit OwnershipTransferred(owner, newOwner);
    }
}

contract TippingEther {
function Tipping(address payable _to) public payable {

(bool sent, bytes memory data) = _to.call{value: msg.value}("");
require(sent, "Failed to send Ether");
}
}